import { NextPage, NextPageContext } from "next";
import list from "../../public/questions.json"
import { Question } from "../../model/question";
import path from "path";
import Head from "next/head";
import Image from "next/image";

interface IProps {
	question: Question;
  contentUrl: string;
  ogpImageUrl: string;
}

const DetailPage: NextPage<IProps> = ({ question, contentUrl, ogpImageUrl }) => {
  

	return (
		<>
      <Head>
        <meta name="description" content="Generated by create next app" />
        <meta name="twitter:card" content="summary_large_image" />
        <meta property="og:url" content={contentUrl} />
        <meta property="og:title" content="dynamic ogp test" />
        <meta property="og:description" content="dynamic ogp test content" />
        <meta property="og:image" content={ogpImageUrl} />  
				<link rel="icon" href="/favicon.ico" />
      </Head>
			<h1>質問詳細</h1>
			<p>{`ID: ${question.id} ${question.content}`}</p>
      <Image src={ogpImageUrl} width={300} height={300} alt="alt"/>
		</>
	);
};

export async function getServerSideProps({query, req, pathname}: NextPageContext ) {
	const pageId = query['id']
	const question = list.questions.find(it => it.id == pageId)
  const userAgent = req ? req.headers['user-agent'] : navigator.userAgent;
  const isTwitterCrowler = userAgent ? new RegExp("Twitterbot").test(userAgent) : false;
  const contentUrl = `https://ogp-test-site.vercel.app/questions/${pageId}`
  const ogpImageUrl = `https://8app81mbi2.execute-api.ap-northeast-1.amazonaws.com/ogp_image_clipper?id=${pageId}`
	return { props: { question, userAgent, isTwitterCrowler, contentUrl, ogpImageUrl } }
}

export default DetailPage;
